rnC = norm_clusC(data_mix2,10))
print(summary(tm1)[,c(1,3,5,6)])
devtools::build_vignettes()
library(microbenchmark)
# 定义函数
function1 <- function() {
cat("Some output from function1\n")
}
function2 <- function() {
# 你的函数2的代码
}
# 进行性能比较
mb_result <- microbenchmark(
"Function 1" = function1(),
"Function 2" = function2(),
times = 100
)
# 手动打印结果
print(mb_result)
library(microbenchmark)
# 定义函数
function1 <- function() {
cat("Some output from function1\n")
}
function2 <- function() {
# 你的函数2的代码
}
# 进行性能比较
mb_result <- microbenchmark(
"Function 1" = function1(),
"Function 2" = function2(),
times = 100
)
# 手动打印结果
print(mb_result)
devtools::build_vignettes()
# library(SA23204182)
data(data_mix2)
sink_file <- tempfile()
sink(sink_file)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10),
rnC = norm_clusC(data_mix2,10))
sink()
summary(tm1)
print(summary(tm1)[,c(1,3,5,6)])
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::build_vignettes()
# library(SA23204182)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10,iters=F),
rnC = norm_clusC(data_mix2,10),iters=false)
# library(SA23204182)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10,iters=F),
rnC = norm_clusC(data_mix2,10),iters=F)
print(summary(tm1)[,c(1,3,5,6)])
# library(SA23204182)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10),
rnC = norm_clusC(data_mix2,10),iters=F)
print(summary(tm1)[,c(1,3,5,6)])
# library(SA23204182)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10,iters=F),
rnC = norm_clusC(data_mix2,10))
print(summary(tm1)[,c(1,3,5,6)])
# library(SA23204182)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10,iters=FALSE),
rnC = norm_clusC(data_mix2,10),iters=FALSE)
print(summary(tm1)[,c(1,3,5,6)])
devtools::document()
devtools::check()
devtools::build_vignettes()
library(Rcpp)
Rcpp::cppFunction(
'
List norm(NumericVector data,int K,bool iters=true) {
int N=data.size();
double data_mean=mean(data);
double data_sd=sd(data);
NumericVector label(N);
NumericVector param(5);
param[0] = 0.5;
param[1] = data_mean;
param[2] = data_mean + data_sd;
param[3] = pow(data_sd, 2);
param[4] = pow(data_sd, 2);
NumericVector z(N);
for (int iter = 0; iter < K; iter++) {
double p1, p0;
for (int i = 0; i < N; i++) {
p1 = param[0]*exp(-0.5 * pow((data[i] - param[1]), 2)/param[3])/ sqrt(param[3]);
p0 = (1-param[0])*exp(-0.5 * pow((data[i] - param[2]), 2)/ param[4]) / sqrt(param[4]);
label[i]=p1/(p1+p0);
}
for (int i = 0; i < N; i++){
label[i]=round(label[i]);
}
if (iter >0 && is_true(all(z==label))){
if (iters==true )
Rcout << "EM iterations:" << iter << std::endl;
break;
}
for (int i = 0; i < N; i++){
z[i]=label[i];
}
param[0]=mean(label);
double s1=0,s2=0,s3=0,s4=0;
for (int i = 0; i < N; i++) {
s1 += label[i] * data[i]/N/param[0];
s2 += (1-label[i]) * data[i]/N/(1-param[0]);
s3 += label[i] * pow(data[i],2);
s4 += (1-label[i]) * pow(data[i],2);
}
param[1] = s1;
param[2] = s2;
param[3] = s3/N/(param[0])- pow(s1,2);
param[4] = s4/N/(1-param[0])- pow(s2,2);
}
List result = List::create(
Named("label") = label,
Named("param") = param);
return result;
}
'
)
library(Rcpp)
Rcpp::cppFunction(
'
List norm(NumericVector data,int K,bool iters=true) {
int N=data.size();
double data_mean=mean(data);
double data_sd=sd(data);
NumericVector label(N);
NumericVector param(5);
param[0] = 0.5;
param[1] = data_mean;
param[2] = data_mean + data_sd;
param[3] = pow(data_sd, 2);
param[4] = pow(data_sd, 2);
NumericVector z(N);
for (int iter = 0; iter < K; iter++) {
double p1, p0;
for (int i = 0; i < N; i++) {
p1 = param[0]*exp(-0.5 * pow((data[i] - param[1]), 2)/param[3])/ sqrt(param[3]);
p0 = (1-param[0])*exp(-0.5 * pow((data[i] - param[2]), 2)/ param[4]) / sqrt(param[4]);
label[i]=p1/(p1+p0);
}
for (int i = 0; i < N; i++){
label[i]=round(label[i]);
}
if (iter >0 && is_true(all(z==label))){
if (iters==true )
Rcout << "EM iterations:" << iter << std::endl;
break;
}
for (int i = 0; i < N; i++){
z[i]=label[i];
}
param[0]=mean(label);
double s1=0,s2=0,s3=0,s4=0;
for (int i = 0; i < N; i++) {
s1 += label[i] * data[i]/N/param[0];
s2 += (1-label[i]) * data[i]/N/(1-param[0]);
s3 += label[i] * pow(data[i],2);
s4 += (1-label[i]) * pow(data[i],2);
}
param[1] = s1;
param[2] = s2;
param[3] = s3/N/(param[0])- pow(s1,2);
param[4] = s4/N/(1-param[0])- pow(s2,2);
}
List result = List::create(
Named("label") = label,
Named("param") = param);
return result;
}
'
)
load("D:/pkg/SA23204182/data/data_mix2.RData")
norm(data_mix2,10)
norm(data_mix2,10,iters=FALSE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
devtools::check()
devtools::build_vignettes()
.Last.error
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
vignette(SA23204182)
remove.packages("SA23204182")
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
install.packages('D:/pkg/SA23204182_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
install.packages('D:/pkg/SA23204182_1.0.tar.gz',repo=NULL)
devtools::build(vignettes=FALSE)
getwd()
install.packages('D:/pkg/SA23204182_1.0.tar.gz',repo=NULL)
vignette(package = "SA23204182", all = TRUE)
R CMD build SA23204182
build SA23204182
devtools::build(vignettes=FALSE)
remove.packages("SA23204182")
install.packages('D:/pkg/SA23204182_1.0.tar.gz',repo=NULL)
vignette(package = "SA23204182")
set.seed(111)
indept.Metropolis <- function(sigma_g, x0, N){#链生成
#sigma_g为提议方差 x0为初始值 N链长
x = numeric(N)
x[1] = x0
u = runif(N)
k = 0
for(i in 2:N){
y = rnorm(1, x[i-1], sigma_g)
porb = (1+x[i-1]^2) / (1+y^2)
if(u[i] <= porb)
x[i] = y
else{
x[i] = x[i-1]
k = k + 1
}
}
return(list(x=x, k=k))
}
chain_len = 5000
xt = numeric(chain_len)
sigma_g = c(0.05, 0.5, 2.5, 16)
x0 <- 3   # initial point
indept1 <- indept.Metropolis(sigma_g[1], x0, chain_len)
indept2 <- indept.Metropolis(sigma_g[2], x0, chain_len)
indept3 <- indept.Metropolis(sigma_g[3], x0, chain_len)
indept4 <- indept.Metropolis(sigma_g[4], x0, chain_len)
print(c(indept1$k, indept2$k, indept3$k, indept4$k)/chain_len)#四个链的拒绝率
par(mfrow=c(2,2))  #display 4 graphs together
refline <- qcauchy(c(.025, .975))
indept <- cbind(indept1$x, indept2$x, indept3$x, indept4$x)
for (j in 1:4) {
plot(indept[,j], type="l",
xlab=bquote(sigma == .(round(sigma_g[j],3))),
ylab="X", ylim=range(indept[,j]))
abline(h=refline)
}
par(mfrow=c(1,1)) #reset to default
devtools::build_vignettes()
## hw0 {#section-0}
## hw0 {#section-0}
## hw0 {#section-0}
## hw0 {#section-0}
## hw0 {#section-0}
## hw0 {#section-0}
## hw0 {#section-0}
## hw0 {#section-0}
set.seed(12)
library(boot); library(MASS)
lammda<-2
n<-c(5,10,20);B<-1e3;m<-1e3
bias<-matrix(0, nrow =m, ncol = 3)
se<-matrix(0, nrow =m, ncol = 3)
f.lam <- function(x,i) 1/mean(x[i])
#n=5
for (k in 1:m) {
x <- rexp(n[1],lammda)
obj <- boot(data=x,statistic=f.lam,R=B)
bias[k,1]<-mean(obj$t)-obj$t0
se[k,1]<-sd(obj$t)
}
round(c(mean.bias=mean(bias[,1]),mean.se=mean(se[,1])),3)
#n=10
for (k in 1:m) {
x <- rexp(n[2],lammda)
obj <- boot(data=x,statistic=f.lam,R=B)
bias[k,2]<-mean(obj$t)-obj$t0
se[k,2]<-sd(obj$t)
}
round(c(mean.bias=mean(bias[,2]),mean.se=mean(se[,2])),3)
#n=20
for (k in 1:m) {
x <- rexp(n[3],lammda)
obj <- boot(data=x,statistic=f.lam,R=B)
bias[k,3]<-mean(obj$t)-obj$t0
se[k,3]<-sd(obj$t)
}
round(c(mean.bias=mean(bias[,3]),mean.se=mean(se[,3])),3)
set.seed(111)
library(bootstrap) #for the law data
print(cor(law$LSAT, law$GPA))#直接统计的协方差
fff<-function(x){#统计量表达式
return(cor(x[,1],x[,2]))
}
boot.t.ci <-#仿照书上的函数compute the bootstrap t CI
function(x, B = 500, R = 100, level = .95, statistic){
x <- as.matrix(x)#as.matrix()将x转换为矩阵形式
n <- nrow(x)
stat <- numeric(B); se <- numeric(B)
boot.se <- function(x, R, f) {#局部自举函数，计算对x自举的统计量f的标准差
x <- as.matrix(x); m <- nrow(x)
th <- replicate(R, expr = {
i <- sample(1:m, size = m, replace = TRUE)
f(x[i, ])
})#replicate重复执行R次语句expr
return(sd(th))
}
for (b in 1:B) {#正式开始，对x自举B次
j <- sample(1:n, size = n, replace = TRUE)
y <- x[j, ]#自举结果
stat[b] <- statistic(y)#theta.hat.(b)
se[b] <- boot.se(y, R = R, f = statistic)#使用局部自举函数计算theta.hat.(b)的标准差
}
stat0 <- statistic(x)#theta.hat
t.stats <- (stat - stat0) / se
se0 <- sd(stat)#theta.se
alpha <- 1 - level
Qt <- quantile(t.stats, c(alpha/2, 1-alpha/2), type = 1)#寻找分位数
names(Qt) <- rev(names(Qt))#将名称进行反转,但不移动数值
CI <- rev(stat0 - Qt * se0)#置信区间
CI
}
boot.t.ci(law,statistic=fff)
library('DAAG'); attach(ironslag)
install.packages(DAAG)
library(DAAG); attach(ironslag)
install.packages('DAAG')
library('DAAG'); attach(ironslag)
install.packages("DAAG")
library('DAAG'); attach(ironslag)
set.seed(1)
n <- length(magnetic) #in DAAG ironslag
n
e1 <- e2 <- e3 <- e4 <- numeric(n*(n-1))
m<-1#指针
# leave-two-out cross validation
for (k in 2:n) {
for(j in 1:(k-1)){#*很容易出错的k-1要带括号
y <- magnetic[-c(k,j)]
x <- chemical[-c(k,j)]
#linear
J1 <- lm(y ~ x)#拟合
yhatk1 <- J1$coef[1] + J1$coef[2] * chemical[k]#预报k
yhatj1 <- J1$coef[1] + J1$coef[2] * chemical[j]#预报j
e1[m] <- magnetic[k] - yhatk1#预报误差k
e1[m+1] <- magnetic[j] - yhatj1#预报误差j
#quadratic
J2 <- lm(y ~ x + I(x^2))
yhatk2 <- J2$coef[1] + J2$coef[2] * chemical[k] +
J2$coef[3] * chemical[k]^2
yhatj2 <- J2$coef[1] + J2$coef[2] * chemical[j] +
J2$coef[3] * chemical[j]^2
e2[m] <- magnetic[k] - yhatk2#预报误差k
e2[m+1] <- magnetic[j] - yhatj2
#exponential
J3 <- lm(log(y) ~ x)
logyhatk3 <- J3$coef[1] + J3$coef[2] * chemical[k]
logyhatj3 <- J3$coef[1] + J3$coef[2] * chemical[j]
yhatk3 <- exp(logyhatk3)
yhatj3 <- exp(logyhatj3)
e3[m] <- magnetic[k] - yhatk3#预报误差k
e3[m+1] <- magnetic[j] - yhatj3
#log-log
J4 <- lm(log(y) ~ log(x))
logyhatk4 <- J4$coef[1] + J4$coef[2] * log(chemical[k])
logyhatj4 <- J4$coef[1] + J4$coef[2] * log(chemical[j])
yhatk4 <- exp(logyhatk4)
yhatj4 <- exp(logyhatj4)
e4[m] <- magnetic[k] - yhatk4#预报误差k
e4[m+1] <- magnetic[j] - yhatj4
m<-m+2
}
}
c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))#平均平方预报误差
detach(ironslag)
#命令detach()结束使用数据集. 之前已经运行过attach().运行一次detach()只能删除上一次attach()的结果.所以通过多次运行detach()可以完全删除之前attach()的影响.再次运行attach()就不会报错了.
install.packages("coda")
devtools::document()
devtools::check()
devtools::document()
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
scale011 <- function(x) {
if (is.numeric(x)==F) return(x)
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# 创建一个数据框
my_df <- data.frame(
A = c(1, 2, 3,NA),
B = c("a", "b", "c","p"),
C = c(4, 5, 6,7),
D = c(7, 8, 9,9)
)
data.frame(lapply(my_df, scale011))
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
scale011 <- function(x) {
if (is.numeric(x)==F) return(x)
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# 创建一个数据框
my_df <- data.frame(
A = c(1, 2, 3,NA),
B = c("a", "b", "c","p"),
C = c(4, 5, 6,7),
D = c(7, 8, 9,9)
)
data.frame(lapply(my_df, scale011))
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
scale01 <- function(x) {
rng <- range(x, na.rm = TRUE)#计算向量 x的最小值和最大值。na.rm = TRUE 表示在计算范围时要移除缺失值（NA）
(x - rng[1]) / (rng[2] - rng[1])
}
scale01(c(1,2,3,4,5))
scale011 <- function(x) {
if (is.numeric(x)==F) return(x)
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# 创建一个数据框
my_df <- data.frame(
A = c(1, 2, 3,NA),
B = c("a", "b", "c","p"),
C = c(4, 5, 6,7),
D = c(7, 8, 9,9)
)
data.frame(lapply(my_df, scale011))
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
Error: processing vignette 'homework.Rmd' failed with diagnostics:
devtools::check()
library(magick)
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:\pkg\SA23204182\vignettes\1.png")
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩质量
img <- image_quality(img, "20%")
install.packages("magick")
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:\pkg\SA23204182\vignettes\hw8_1.png", quality = 20)
install.packages("magick")
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 20)
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 20)
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 2)
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 100)
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", density = "150x150")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", density = "15x15")
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
