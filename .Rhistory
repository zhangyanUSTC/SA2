bias[k,3]<-mean(obj$t)-obj$t0
se[k,3]<-sd(obj$t)
}
round(c(mean.bias=mean(bias[,3]),mean.se=mean(se[,3])),3)
set.seed(111)
library(bootstrap) #for the law data
print(cor(law$LSAT, law$GPA))#直接统计的协方差
fff<-function(x){#统计量表达式
return(cor(x[,1],x[,2]))
}
boot.t.ci <-#仿照书上的函数compute the bootstrap t CI
function(x, B = 500, R = 100, level = .95, statistic){
x <- as.matrix(x)#as.matrix()将x转换为矩阵形式
n <- nrow(x)
stat <- numeric(B); se <- numeric(B)
boot.se <- function(x, R, f) {#局部自举函数，计算对x自举的统计量f的标准差
x <- as.matrix(x); m <- nrow(x)
th <- replicate(R, expr = {
i <- sample(1:m, size = m, replace = TRUE)
f(x[i, ])
})#replicate重复执行R次语句expr
return(sd(th))
}
for (b in 1:B) {#正式开始，对x自举B次
j <- sample(1:n, size = n, replace = TRUE)
y <- x[j, ]#自举结果
stat[b] <- statistic(y)#theta.hat.(b)
se[b] <- boot.se(y, R = R, f = statistic)#使用局部自举函数计算theta.hat.(b)的标准差
}
stat0 <- statistic(x)#theta.hat
t.stats <- (stat - stat0) / se
se0 <- sd(stat)#theta.se
alpha <- 1 - level
Qt <- quantile(t.stats, c(alpha/2, 1-alpha/2), type = 1)#寻找分位数
names(Qt) <- rev(names(Qt))#将名称进行反转,但不移动数值
CI <- rev(stat0 - Qt * se0)#置信区间
CI
}
boot.t.ci(law,statistic=fff)
library('DAAG'); attach(ironslag)
install.packages(DAAG)
library(DAAG); attach(ironslag)
install.packages('DAAG')
library('DAAG'); attach(ironslag)
install.packages("DAAG")
library('DAAG'); attach(ironslag)
set.seed(1)
n <- length(magnetic) #in DAAG ironslag
n
e1 <- e2 <- e3 <- e4 <- numeric(n*(n-1))
m<-1#指针
# leave-two-out cross validation
for (k in 2:n) {
for(j in 1:(k-1)){#*很容易出错的k-1要带括号
y <- magnetic[-c(k,j)]
x <- chemical[-c(k,j)]
#linear
J1 <- lm(y ~ x)#拟合
yhatk1 <- J1$coef[1] + J1$coef[2] * chemical[k]#预报k
yhatj1 <- J1$coef[1] + J1$coef[2] * chemical[j]#预报j
e1[m] <- magnetic[k] - yhatk1#预报误差k
e1[m+1] <- magnetic[j] - yhatj1#预报误差j
#quadratic
J2 <- lm(y ~ x + I(x^2))
yhatk2 <- J2$coef[1] + J2$coef[2] * chemical[k] +
J2$coef[3] * chemical[k]^2
yhatj2 <- J2$coef[1] + J2$coef[2] * chemical[j] +
J2$coef[3] * chemical[j]^2
e2[m] <- magnetic[k] - yhatk2#预报误差k
e2[m+1] <- magnetic[j] - yhatj2
#exponential
J3 <- lm(log(y) ~ x)
logyhatk3 <- J3$coef[1] + J3$coef[2] * chemical[k]
logyhatj3 <- J3$coef[1] + J3$coef[2] * chemical[j]
yhatk3 <- exp(logyhatk3)
yhatj3 <- exp(logyhatj3)
e3[m] <- magnetic[k] - yhatk3#预报误差k
e3[m+1] <- magnetic[j] - yhatj3
#log-log
J4 <- lm(log(y) ~ log(x))
logyhatk4 <- J4$coef[1] + J4$coef[2] * log(chemical[k])
logyhatj4 <- J4$coef[1] + J4$coef[2] * log(chemical[j])
yhatk4 <- exp(logyhatk4)
yhatj4 <- exp(logyhatj4)
e4[m] <- magnetic[k] - yhatk4#预报误差k
e4[m+1] <- magnetic[j] - yhatj4
m<-m+2
}
}
c(mean(e1^2), mean(e2^2), mean(e3^2), mean(e4^2))#平均平方预报误差
detach(ironslag)
#命令detach()结束使用数据集. 之前已经运行过attach().运行一次detach()只能删除上一次attach()的结果.所以通过多次运行detach()可以完全删除之前attach()的影响.再次运行attach()就不会报错了.
install.packages("coda")
devtools::document()
devtools::check()
devtools::document()
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
scale011 <- function(x) {
if (is.numeric(x)==F) return(x)
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# 创建一个数据框
my_df <- data.frame(
A = c(1, 2, 3,NA),
B = c("a", "b", "c","p"),
C = c(4, 5, 6,7),
D = c(7, 8, 9,9)
)
data.frame(lapply(my_df, scale011))
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
scale011 <- function(x) {
if (is.numeric(x)==F) return(x)
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# 创建一个数据框
my_df <- data.frame(
A = c(1, 2, 3,NA),
B = c("a", "b", "c","p"),
C = c(4, 5, 6,7),
D = c(7, 8, 9,9)
)
data.frame(lapply(my_df, scale011))
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
scale01 <- function(x) {
rng <- range(x, na.rm = TRUE)#计算向量 x的最小值和最大值。na.rm = TRUE 表示在计算范围时要移除缺失值（NA）
(x - rng[1]) / (rng[2] - rng[1])
}
scale01(c(1,2,3,4,5))
scale011 <- function(x) {
if (is.numeric(x)==F) return(x)
rng <- range(x, na.rm = TRUE)
(x - rng[1]) / (rng[2] - rng[1])
}
# 创建一个数据框
my_df <- data.frame(
A = c(1, 2, 3,NA),
B = c("a", "b", "c","p"),
C = c(4, 5, 6,7),
D = c(7, 8, 9,9)
)
data.frame(lapply(my_df, scale011))
library(dplyr)
# 使用mutate_if()用于对数据框的某些列进行变换。条件为is.numeric为真
mutate_if(my_df,is.numeric,scale01)#scale01(x)会报错
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
Error: processing vignette 'homework.Rmd' failed with diagnostics:
devtools::check()
library(magick)
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:\pkg\SA23204182\vignettes\1.png")
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩质量
img <- image_quality(img, "20%")
install.packages("magick")
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:\pkg\SA23204182\vignettes\hw8_1.png", quality = 20)
install.packages("magick")
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 20)
install.packages("magick")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 20)
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 2)
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", quality = 100)
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", density = "150x150")
library(magick)
# 读取原始图像
img <- image_read("D:/pkg/SA23204182/vignettes/1.png")
# 设置压缩
image_write(img, path = "D:/pkg/SA23204182/vignettes/hw8_1.png", density = "15x15")
devtools::check()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
remove.packages("SA23204182")
devtools::install_github("zhangyanUSTC/SA23204182")
library(SA23204182)
data(data_mix2)
sink_file <- tempfile()
sink(sink_file)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10),
rnC = norm_clusC(data_mix2,10))
sink()
print(summary(tm1)[,c(1,3,5,6)])
devtools::install_github("zhangyanUSTC/SA23204182")
library(SA23204182)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10),
rnC = norm_clusC(data_mix2,10))
print(summary(tm1)[,c(1,3,5,6)])
devtools::document()
install.packages("igraph")
library(igraph)
# 谱聚类函数
spectralClustering <- function(adjacencyMatrix, numClusters) {
graph <- graph_from_adjacency_matrix(adjacencyMatrix, mode = "undirected", weighted = NULL)
# 计算谱嵌入
spectralEmbedding <- embedding.spectral(graph, dim = numClusters)
# 使用K-means聚类
clusterAssignments <- kmeans(spectralEmbedding, centers = numClusters)$cluster
return(clusterAssignments)
}
# 生成一个例子
set.seed(123)
n <- 100
adjacencyMatrix <- matrix(rbinom(n^2, 1, 0.1), n, n)
# 调用谱聚类函数
numClusters <- 2
result <- spectralClustering(adjacencyMatrix, numClusters)
library(igraph)
library(cluster)
# 谱聚类函数
spectralClustering <- function(adjacencyMatrix, numClusters) {
graph <- graph_from_adjacency_matrix(adjacencyMatrix, mode = "undirected", weighted = NULL)
# 获取拉普拉斯矩阵
laplacianMatrix <- graph Laplacian(graph, normalized = TRUE)
library(igraph)
library(cluster)
# 谱聚类函数
spectralClustering <- function(adjacencyMatrix, numClusters) {
graph <- graph_from_adjacency_matrix(adjacencyMatrix, mode = "undirected", weighted = NULL)
# 获取拉普拉斯矩阵
laplacianMatrix <- graph.laplacian(graph, normalized = TRUE)
# 进行谱聚类
spectralClusters <- kmeans(laplacianMatrix$vectors[, 1:numClusters], centers = numClusters)$cluster
return(spectralClusters)
}
# 示例
set.seed(123)
n <- 100
adjacencyMatrix <- matrix(rbinom(n^2, 1, 0.1), n, n)
# 执行谱聚类
numClusters <- 2
result <- spectralClustering(adjacencyMatrix, numClusters)
library(igraph)
library(cluster)
# 谱聚类函数
spectralClustering <- function(adjacencyMatrix, numClusters) {
graph <- graph_from_adjacency_matrix(adjacencyMatrix, mode = "undirected", weighted = NULL)
# 获取拉普拉斯矩阵
laplacianMatrix <- graph.laplacian(graph, normalized = TRUE)
# 计算拉普拉斯矩阵的特征值和特征向量
laplacianEigen <- eigen(laplacianMatrix)
# 选择前 numClusters 个特征向量
selectedEigenVectors <- laplacianEigen$vectors[, 1:numClusters]
# 进行谱聚类
spectralClusters <- kmeans(selectedEigenVectors, centers = numClusters)$cluster
return(spectralClusters)
}
# 示例
set.seed(123)
n <- 100
adjacencyMatrix <- matrix(rbinom(n^2, 1, 0.1), n, n)
# 执行谱聚类
numClusters <- 2
result <- spectralClustering(adjacencyMatrix, numClusters)
# 输出结果
cat("社区分配:", result, "\n")
save(adjacencyMatrix, file = "adjacency_matrix.RData")
library(SA23204182)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10),
rnC = norm_clusC(data_mix2,10))
print(summary(tm1)[,c(1,3,5,6)])
?norm_clus
?norm_clus
data(data_mix2)
clu<- norm_clus(data_mix2,2)
sum(clu$label)
data(data_mix2)
clu<- norm_clus(data_mix2,2)
sum(clu$label)
data(data_mix2)
norm_clusC(data_mix2,10)
data(data_mix2)
tm1 <- microbenchmark::microbenchmark(
rnR = norm_clus(data_mix2,10,iters=FALSE),
rnC = norm_clusC(data_mix2,10,iters=FALSE))
print(summary(tm1)[,c(1,3,5,6)])
load("D:/pkg/SA23204182/data/adjacency_matrix.RData")
load("D:/pkg/SA23204182/data/adjacency_matrix.RData")
library(igraph)
library(cluster)
# 谱聚类函数
spectralClustering <- function(adjacencyMatrix, numClusters) {
graph <- graph_from_adjacency_matrix(adjacencyMatrix, mode = "undirected", weighted = NULL)
# 获取拉普拉斯矩阵
laplacianMatrix <- graph.laplacian(graph, normalized = TRUE)
# 计算拉普拉斯矩阵的特征值和特征向量
laplacianEigen <- eigen(laplacianMatrix)
# 选择前 numClusters 个特征向量
selectedEigenVectors <- laplacianEigen$vectors[, 1:numClusters]
# 进行谱聚类
spectralClusters <- kmeans(selectedEigenVectors, centers = numClusters)$cluster
return(spectralClusters)
}
numClusters <- 2
result <- spectralClustering(adjacenc_yMatrix, numClusters)
numClusters <- 2
result <- spectralClustering(adjacencyMatrix, numClusters)
# 输出结果
cat("社区分配:", result, "\n")
library(igraph)
data(karate)
adjacencyMatrixKarate <- get.adjacency(karate)
library(igraph)
data(karate)
adjacencyMatrixKarate <- get.adjacency(karate)
library(igraph)
data(karate)
library(igraph)
data(Zachary)
g <- make_graph('Zachary')
plot(g)
library(igraph)
adjacencyMatrixKarate <- get.adjacency('Zachary')
library(igraph)
g <- make_graph('Zachary')
adjacencyMatrixKarate <- get.adjacency(g)
numClusters <- 2
result <- spectralClustering(adjacencyMatrixKarate, numClusters)
cat("Community Assignments:", result, "\n")
library(igraph)
g <- make_graph('Zachary')
plot(g)
library(igraph)
g <- make_graph('Zachary')
plot(g)
library(igraph)
g <- make_graph('Zachary')
plot(g)
adjacencyMatrixKarate <- get.adjacency(g)
numClusters <- 2
result <- spectralClustering(adjacencyMatrixKarate, numClusters)
cat("Community Assignments:", result, "\n")
library(igraph)
g <- make_graph('Zachary')
plot(g)
library(igraph)
g <- make_graph('Zachary')
plot(g)
adjacencyMatrixg <- get.adjacency(g)
numClusters <- 2
result <- spectralClustering(adjacencyMatrixg, numClusters)
cat("Community Assignments:", result, "\n")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
library(igraph)
g <- make_graph('Zachary')
plot(g)
library(igraph)
g <- make_graph('Zachary')
igraph::plot(g)
library(igraph)
g <- make_graph('Zachary')
plot.igraph(g)
library(igraph)
g <- make_graph('Zachary')
plot.igraph(g)
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, xlim = c(-1, 1),vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, xlim = c(-5, 1),vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, xlim = c(-5, 5),vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, xlim = c(-.5, .5),vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, xlim = c(-.1, .1),vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.shape = 1/2,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.shape = 5,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.shape = 5,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, loop.size = 1,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, loop.size = 5,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, loop.size = 10,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.expand = 15,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.expand = 30,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.expand = 30,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.expand = 30,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk, mark.expand = 100,vertex.color = "green")
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk)
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk)
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk)
library(igraph)
g <- make_graph('Zachary')
plot(g, layout = layout_with_kk)
library(igraph)
g <- make_graph('Zachary')
plot(g)
adjacencyMatrixKarate <- get.adjacency(g)
numClusters <- 2
result <- spectralClustering(adjacencyMatrixKarate, numClusters)
cat("Community Assignments:", result, "\n")
library(igraph)
g <- make_graph('Zachary')
plot(g)
adjacencyMatrixKarate <- get.adjacency(g)
numClusters <- 2
result <- spectralClustering(adjacencyMatrixKarate, numClusters)
cat("Community Assignments:", result, "\n")
g <- make_graph('Zachary')
devtools::document()
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build(vignettes=FALSE)
devtools::build(vignettes=FALSE)
remove.packages("SA23204182")
install.packages('D:/pkg/SA23204182_1.0.tar.gz',repo=NULL)
devtools::install_github("zhangyanUSTC/SA23204182")
libaray(SA23204281)
library(SA23204281)
library(SA23204181)
library(SA23204182)
data(adjacency_matrix)
numClusters <- 2
result <- spectralClustering(adjacencyMatrix, numClusters)
library(SA23204182)
data(adjacency_matrix)
numClusters <- 2
result <- spectralClustering(adjacencyMatrix, numClusters)
devtools::install_github("zhangyanUSTC/SA23204182")
devtools::build(vignettes=FALSE)
remove.packages("SA23204182")
